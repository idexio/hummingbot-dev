name: ci

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]
    types: [ready_for_review, opened, synchronize, reopened]

jobs:
  build_hummingbot:
    name: build + stable tests
    if: github.event.pull_request.draft == false
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v2
    
      # Use cache's hashFiles function to check for changes in core code
      - name: Check for code changes
        id: program-changes
        uses: actions/cache@v2
        env:
          # Increase this value to manually reset cache if program files have not changed
          CACHE_NUMBER: 0
        with:
          path: README.md # placeholder file
          key: ${{ runner.os }}-build-${{ env.CACHE_NUMBER }}-${{ hashFiles('hummingbot/*', '**/*.py', '**/*.py*', '**/*.pxd', 'test/*') }}
      
      # Remove envs directory if exists to prevent bin/tar restore errors
      - name: Remove envs directory
        run: rm -Rf /usr/share/miniconda/envs

      # Check for setup/environmnet-linux.yml changes
      - name: Cache conda dependencies
        id: conda-dependencies
        uses: actions/cache@v2
        env:
          # Increase this value to manually reset cache if setup/environment-linux.yml has not changed
          CONDA_CACHE_NUMBER: 0
        with:
          path: |
            /home/runner/conda_pkgs_dir/
            /usr/share/miniconda/envs
          key: ${{ runner.os }}-conda-${{ env.CONDA_CACHE_NUMBER }}-${{ hashFiles('setup/environment-linux.yml') }}

      # Install python/conda to check if core code has changed
      - uses: actions/setup-python@v2
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        with:
          python-version: 3.x

      - name: Install Miniconda and nose
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda install -c anaconda nose

      # Install pre_commit if code has changed
      - name: Install pre_commit
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda install -c conda-forge pre_commit
        
      # Install hummingbot env if environment-linux.yml has changed
      - name: Install Hummingbot
        if: steps.conda-dependencies.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          ./install

      # Compile and run tests if code has changed
      - name: Run Flake8
        shell: bash
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda activate hummingbot
          pre-commit run --all-files 
      - name: Compile Hummingbot
        shell: bash
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda info --envs
          conda activate hummingbot
          conda env export
          ./compile
      - name: Run stable tests
        if: steps.program-changes.outputs.cache-hit != 'true' || steps.conda-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          source /usr/share/miniconda/etc/profile.d/conda.sh
          conda activate hummingbot
          nosetests -d -v test/test*.py
      
      # Notify results to discord
      - uses: actions/setup-ruby@v1
      - name: Send Webhook Notification
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          HOOK_OS_NAME: ${{ runner.os }}
          WORKFLOW_NAME: ${{ github.workflow }}
        run: |
          git clone --depth 1 https://github.com/DiscordHooks/github-actions-discord-webhook.git webhook
          bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
        shell: bash